// This file may be edited manually or auto-generated using IfcKit at www.buildingsmart-tech.org.
// IFC content is copyright (C) 1996-2018 BuildingSMART International Ltd.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Xml.Serialization;

using BuildingSmart.IFC.IfcGeometryResource;
using BuildingSmart.IFC.IfcMeasureResource;
using BuildingSmart.IFC.IfcPresentationAppearanceResource;
using BuildingSmart.IFC.IfcPresentationOrganizationResource;

namespace BuildingSmart.IFC.IfcGeometricModelResource
{
	[Guid("a0926592-ef19-4728-9ea9-4f8630bbdff7")]
	public partial class IfcSweptDiskSolid : IfcSolidModel
	{
		[DataMember(Order = 0)] 
		[Description("The curve used to define the sweeping operation. The solid is generated by sweeping a circular disk along the directrix.")]
		[Required()]
		public IfcCurve Directrix { get; set; }
	
		[DataMember(Order = 1)] 
		[XmlAttribute]
		[Description("The radius of the circular disk to be swept along the directrix.")]
		[Required()]
		public IfcPositiveLengthMeasure Radius { get; set; }
	
		[DataMember(Order = 2)] 
		[XmlAttribute]
		[Description("This attribute is optional, if present it defines the radius of a circular hole in the centre of the disk.")]
		public IfcPositiveLengthMeasure? InnerRadius { get; set; }
	
		[DataMember(Order = 3)] 
		[XmlAttribute]
		[Description("The parameter value on the directrix at which the sweeping operation commences.")]
		[Required()]
		public IfcParameterValue StartParam { get; set; }
	
		[DataMember(Order = 4)] 
		[XmlAttribute]
		[Description("The parameter value on the directrix at which the sweeping operation ends.")]
		[Required()]
		public IfcParameterValue EndParam { get; set; }
	
	
		public IfcSweptDiskSolid(IfcCurve directrix, IfcPositiveLengthMeasure radius, IfcParameterValue startParam, IfcParameterValue endParam)
		{
			this.Directrix = directrix;
			this.Radius = radius;
			this.StartParam = startParam;
			this.EndParam = endParam;
		}
	
	
	}
	
}
